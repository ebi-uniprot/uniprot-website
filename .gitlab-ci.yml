stages:
  - test
  - build_static_assets
  - build_docker_image
  - deploy

.js:
  image: node:15 # Keep version in sync with franklin
  before_script:
    - git --version
    - node --version
    - npm --version
    - yarn --version

# TODO: when we want to run test:functional and test:visual use image: buildkite/puppeteer
test:
  extends: .js
  stage: test
  script:
    - env
    - echo $CI_PIPELINE_SOURCE
    - echo $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - echo $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - echo $CI_EXTERNAL_PULL_REQUEST_SOURCE_BRANCH_NAME
    - echo $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME
    - yarn
    - yarn test

merge_and_test:
  rules:
    - if: $CI_PIPELINE_SOURCE == "external_pull_request_event"
      when: always
  extends: .js
  stage: test
  script:
    - echo Merging $CI_EXTERNAL_PULL_REQUEST_SOURCE_BRANCH_NAME into $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME to test upstream effects
    - git checkout $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME
    - git merge $CI_EXTERNAL_PULL_REQUEST_SOURCE_BRANCH_NAME -m "Merge and test"
    - test -n "$(git status --porcelain)" && exit 1 # Exit if merge has conflicts
    - yarn
    - yarn test

build_static_assets:
  only:
    refs:
      - main
  extends: .js
  stage: build_static_assets
  script:
    - yarn
    - yarn build:prod
  artifacts:
    paths:
      - build/

build_docker_image:
  only:
    refs:
      - main
  stage: build_docker_image
  image: docker:latest
  tags:
    - dind
  services:
    - docker:dind
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker --version
    - CONTAINER_IMAGE=${CI_REGISTRY_IMAGE}:latest
    - echo ${CONTAINER_IMAGE}
    - docker build -t ${CONTAINER_IMAGE} --no-cache .
    - docker image ls
    - docker push ${CONTAINER_IMAGE}
    - docker rmi ${CONTAINER_IMAGE}
    - docker logout "$CI_REGISTRY"

.kubectl:
  image: alpine
  before_script:
    - apk add --no-cache curl git bash
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl

deploy:
  only:
    refs:
      - main
  stage: deploy
  extends: .kubectl
  script:
    - ./deploy/deploy.sh HX # fallback
    - ./deploy/deploy.sh HH # main

deploy-fallback-only:
  only:
    refs:
      - deploy-fallback-only
  stage: deploy
  extends: .kubectl
  script:
    - ./deploy/deploy.sh HX # fallback
