variables:
  URL_NGINX_CONF: "https://gitlab.ebi.ac.uk/api/v4/projects/${COMMON_PROJECT_ID}/repository/files/nginx.conf/raw?ref=master&private_token=${GITLAB_USER_API_TOKEN}"
  URL_DOCKER_FILE: "https://gitlab.ebi.ac.uk/api/v4/projects/${COMMON_PROJECT_ID}/repository/files/Dockerfile/raw?ref=master&private_token=${GITLAB_USER_API_TOKEN}"
  URL_DOCKER_IGNORE: "https://gitlab.ebi.ac.uk/api/v4/projects/${COMMON_PROJECT_ID}/repository/files/.dockerignore/raw?ref=master&private_token=${GITLAB_USER_API_TOKEN}"
  URL_DEPLOY_SH: "https://gitlab.ebi.ac.uk/api/v4/projects/${COMMON_PROJECT_ID}/repository/files/deploy.sh/raw?ref=master&private_token=${GITLAB_USER_API_TOKEN}"
  URL_WP_CONFIG_TEMPLATE_yml: "https://gitlab.ebi.ac.uk/api/v4/projects/${COMMON_PROJECT_ID}/repository/files/wp-config-template.yml/raw?ref=master&private_token=${GITLAB_USER_API_TOKEN}"

stages:
  - test
  - build_static_assets
  - build_docker_image
  - deploy

.js:
  image: node:16
  before_script:
    - git --version
    - node --version
    - npm --version
    - yarn --version

# TODO: when we want to run test:functional and test:visual use image: buildkite/puppeteer
test:
  extends: .js
  stage: test
  script:
    - yarn
    - yarn test

merge_and_test:
  only:
    - external_pull_requests
  extends: .js
  stage: test
  script:
    - echo Merging $CI_COMMIT_SHORT_SHA into $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME to test upstream effects
    - git config --global user.email "uniprotci@gmail.com"
    - git config --global user.name "UniProt CI"
    - git fetch origin $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME
    - git checkout $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME
    - git merge $CI_COMMIT_SHA --no-ff -m "Merge and test"
    - test -n "$(git status --porcelain)" && exit 1 # Exit if merge has conflicts
    - yarn
    - yarn test

build_static_assets:
  only:
    refs:
      - main
  extends: .js
  stage: build_static_assets
  script:
    - yarn
    - yarn build:prod
  artifacts:
    paths:
      - build/

build_docker_image:
  only:
    refs:
      - main
  stage: build_docker_image
  image: docker:latest
  tags:
    - dind
  services:
    - docker:dind
  before_script:
    - wget -O .dockerignore "${URL_DOCKER_IGNORE}"
    - wget -O nginx.conf "${URL_NGINX_CONF}"
    - wget -O Dockerfile "${URL_DOCKER_FILE}"
    - echo "--no-cache --no-cookies was not used by wget"
    - if [ ! -f nginx.conf ]; then echo "nginx.conf file is missing"; exit 1; fi
    - if [ ! -f Dockerfile ]; then echo "Dockerfile file is missing"; exit 1; fi
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker --version
    - CONTAINER_IMAGE=${CI_REGISTRY_IMAGE}:latest
    - echo ${CONTAINER_IMAGE}
    - docker build -t ${CONTAINER_IMAGE} --no-cache .
    - docker image ls
    - docker push ${CONTAINER_IMAGE}
    - docker rmi ${CONTAINER_IMAGE}
    - docker logout "$CI_REGISTRY"

.kubectl:
  image: alpine
  before_script:
    - apk add --no-cache curl git bash
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - wget -O deploy.sh "${URL_DEPLOY_SH}"
    - wget -O wp-config-template.yml "${URL_WP_CONFIG_TEMPLATE_yml}"
    - echo "--no-cache --no-cookies was not used by wget"
    - if [ ! -f deploy.sh ]; then echo "k8s deployment file is missing"; exit 1; fi
    - if [ ! -f wp-config-template.yml ]; then echo "k8s config file is missing"; exit 1; fi
    - chmod +x deploy.sh

deploy:
  only:
    refs:
      - main
  stage: deploy
  extends: .kubectl
  script:
    - ./deploy.sh HX uniprot-website-client uniprot-front-end statefulset # fallback app_name namespace type-of-deployment
    - ./deploy.sh HH uniprot-website-client uniprot-front-end statefulset # prod app_name namespace type-of-deployment

deploy-fallback-only:
  only:
    refs:
      - deploy-fallback-only
  stage: deploy
  extends: .kubectl
  script:
    - ./deploy.sh HX uniprot-website-client uniprot-front-end statefulset # fallback app_name namespace type-of-deployment
