variables:
  DEPLOY_REPO: 'front-end-deploy'
  DEPLOY_REPO_URL: 'https://gitlab-ci-token:${GITLAB_USER_API_TOKEN}@gitlab.ebi.ac.uk/uniprot/front-end/${DEPLOY_REPO}.git'
  DOCKER_REPO: 'dockerhub.ebi.ac.uk/uniprot/front-end/front-end-docker'

stages:
  - test
  - build_static_assets
  - build_docker_image
  - deploy

.js:
  image: ${DOCKER_REPO}/alpine-js:1
  before_script:
    - git --version
    - node --version
    - npm --version
    - yarn --version

# TODO: when we want to run test:functional and test:visual use image: buildkite/puppeteer
test:
  extends: .js
  stage: test
  script:
    - yarn
    - yarn test

merge_and_test:
  only:
    - external_pull_requests
  extends: .js
  stage: test
  script:
    - echo Merging $CI_COMMIT_SHORT_SHA into $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME to test upstream effects
    - git config --global user.email "uniprotci@gmail.com"
    - git config --global user.name "UniProt CI"
    - git fetch origin $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME
    - git checkout $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME
    - git reset --hard origin/$CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME
    - git merge $CI_COMMIT_SHA --no-ff -m "Merge and test"
    - test -n "$(git status --porcelain)" && exit 1 # Exit if merge has conflicts
    - yarn
    - yarn test

build_static_assets:
  only:
    refs:
      - main
      - dev
  except:
    - external_pull_requests
  extends: .js
  stage: build_static_assets
  script:
    - git clone $DEPLOY_REPO_URL
    - yarn
    - |
      if [ "$CI_COMMIT_BRANCH" == "main" ]; then
        yarn build:prod
      elif [ "$CI_COMMIT_BRANCH" == "dev" ]; then
        yarn build:dev
      fi
    - ./${DEPLOY_REPO}/scripts/compress.sh
  artifacts:
    paths:
      - build/

build_docker_image:
  only:
    refs:
      - main
      - dev
  except:
    - external_pull_requests
  stage: build_docker_image
  image: ${DOCKER_REPO}/alpine-docker-git:1
  tags:
    - dind
  services:
    - docker:dind
  script:
    - git clone $DEPLOY_REPO_URL
    - mv build ${DEPLOY_REPO}/docker/
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - CONTAINER_IMAGE=${CI_REGISTRY_IMAGE}/${CI_COMMIT_BRANCH}:latest
    - echo $CONTAINER_IMAGE
    - docker build -t $CONTAINER_IMAGE --no-cache ${DEPLOY_REPO}/docker
    - docker image ls
    - docker push $CONTAINER_IMAGE
    - docker rmi $CONTAINER_IMAGE
    - docker logout "$CI_REGISTRY"

deploy:
  only:
    refs:
      - main
      - dev
  except:
    - external_pull_requests
  stage: deploy
  image: ${DOCKER_REPO}/alpine-k8s:1
  script:
    - git clone $DEPLOY_REPO_URL
    - |
      DEPLOY=./${DEPLOY_REPO}/scripts/deploy.sh
      if [ "$CI_COMMIT_BRANCH" == "main" ]; then
        if [ "$DEPLOY_FALLBACK_ONLY" == "true" ]; then
          $DEPLOY HX uniprot-website-fallback 
        elif [ "$DEPLOY_PROD_ONLY" == "true" ]; then
          $DEPLOY HH uniprot-website-prod
        else
          $DEPLOY HX uniprot-website-fallback
          $DEPLOY HH uniprot-website-prod
        fi
      elif [ "$CI_COMMIT_BRANCH" == "dev" ]; then
        $DEPLOY HH uniprot-website-dev
      fi
