import { Link } from 'react-router-dom';

import { Location, LocationToPath } from '../../../app/config/urls';
import TableFromData, {
  TableFromDataColumn,
} from '../../../shared/components/table/TableFromData';
import WithTooltip from '../../../shared/components/WithTooltip';
import useDatabaseInfoMaps from '../../../shared/hooks/useDatabaseInfoMaps';
import { Xref } from '../../../shared/types/apiModel';
import { stringifyQuery } from '../../../shared/utils/url';
import { AgrOrthologsResult } from '../../types/agrOrthologs';
import { XRef } from '../protein-data-views/XRefView';
import styles from './styles/agr-orthology.module.scss';

// Lifted from https://github.com/alliance-genome/agr_ui/blob/6f5acc104df6274bb0642a2317a5b6b102a91b32/src/components/orthology/orthologyTable.js#L29
const isBest = (value = '') =>
  typeof value === 'boolean' ? value : !!value.match(/yes/i);

const getTaxonQuery = (curie: string): string | null => {
  const reTaxonId = /NCBITaxon:(?<taxonId>\d+)/i;
  const match = curie.match(reTaxonId);
  if (!match?.groups?.taxonId) {
    return null;
  }
  return `(taxonomy_id:${match?.groups?.taxonId})`;
};

/*
MGI:88059               (xref:mgi-88059)
Xenbase:XB-GENE-479154  (xref:xenbase-XB-GENE-479154)
FB:FBgn0000108          (xref:flybase-FBgn0000108) 
RGD:2139                (xref:rgd-2139)
ZFIN:ZDB-GENE-000616-13 (xref:zfin-ZDB-GENE-000616-13)
HGNC:620                (xref:hgnc-620)
WB:WBGene00000149       (xref:agr-WBGene00000149) 
*/
const xrefTokenToQueryPrefix = new Map([
  ['MGI', 'mgi'],
  ['Xenbase', 'xenbase'],
  ['FB', 'flybase'],
  ['RGD', 'rgd'],
  ['ZFIN', 'zfin'],
  ['HGNC', 'hgnc'],
  ['WB', 'agr'],
]);

const getXrefQuery = (primaryExternalId: string) => {
  const [xrefToken, ...idToken] = primaryExternalId.split(':');
  if (!idToken) {
    // TODO: log this
    return null;
  }
  const queryPrefix = xrefTokenToQueryPrefix.get(xrefToken);
  if (!queryPrefix) {
    // TODO: log this
    return null;
  }
  return `(xref:${queryPrefix}-${idToken})`;
};

const getXrefAndTaxonQuery = (
  gene: AgrOrthologsResult['geneToGeneOrthologyGenerated']['objectGene']
) => {
  const taxonQuery = getTaxonQuery(gene.taxon.curie);
  const xrefQuery = getXrefQuery(gene.primaryExternalId);
  return taxonQuery && xrefQuery ? `${taxonQuery} AND ${xrefQuery}` : null;
};

// Lifted from https://github.com/alliance-genome/agr_ui/blob/6f5acc104df6274bb0642a2317a5b6b102a91b32/src/components/homology/constants.js#L1
const ORTHOLOGY_METHODS = [
  {
    method: 'Ensembl Compara',
    tooltip:
      'Orthology relationships inferred by the Ensembl Compara pipeline.',
  },
  {
    method: 'HGNC',
    tooltip:
      'Orthologs manually curated by the HUGO Gene Nomenclature Committee for human–model-organism comparisons.',
  },
  {
    method: 'Hieranoid',
    tooltip:
      'Ortholog predictions generated by the Hieranoid hierarchical algorithm.',
  },
  {
    method: 'InParanoid',
    tooltip: 'Orthologous gene pairs identified using the InParanoid tool.',
  },
  {
    method: 'OMA',
    tooltip:
      'Orthology relationships predicted by the OMA (Orthologous MAtrix) algorithm.',
  },
  {
    method: 'OrthoFinder',
    tooltip:
      'Orthology assignments determined by the OrthoFinder graph-based method.',
  },
  {
    method: 'OrthoInspector',
    tooltip:
      'Orthologs detected using the OrthoInspector homology-detection tool.',
  },
  {
    method: 'PANTHER',
    tooltip:
      'Ortholog relationships assigned by PANTHER’s phylogenetic family models.',
  },
  {
    method: 'PhylomeDB',
    tooltip: 'Orthology calls supported by the PhylomeDB gene-tree database.',
  },
  {
    method: 'SonicParanoid',
    tooltip: 'Orthologs inferred by the SonicParanoid pipeline.',
  },
  {
    method: 'Xenbase',
    tooltip: 'Orthologs manually curated by Xenbase for Xenopus species.',
  },
  {
    method: 'ZFIN',
    tooltip: 'Orthologs manually curated by ZFIN for Danio rerio.',
  },
];
// Lifted, with modification, from https://github.com/alliance-genome/agr_ui/blob/f1ab35ab8a869e2956e87c8c19e0fcce2f7988ed/src/constants.js#L424C14-L424C20
const TAXON_TO_INDEX = new Map(
  [
    'NCBITaxon:9606',
    'NCBITaxon:10090',
    'NCBITaxon:10116',
    'NCBITaxon:8355',
    'NCBITaxon:8364',
    'NCBITaxon:7955',
    'NCBITaxon:7227',
    'NCBITaxon:6239',
    'NCBITaxon:559292',
    'NCBITaxon:2697049',
  ].map((taxon, index) => [taxon, index])
);

const columns: TableFromDataColumn<AgrOrthologsResult>[] = [
  {
    id: 'species',
    label: (
      <WithTooltip tooltip="Target organism in which this ortholog candidate resides.">
        Species
      </WithTooltip>
    ),
    filter: (data, filterValue) =>
      data.geneToGeneOrthologyGenerated.objectGene.taxon.name === filterValue,
    render: (data) => data.geneToGeneOrthologyGenerated.objectGene.taxon.name,
  },
  {
    id: 'gene-symbol',
    label: (
      <WithTooltip tooltip="Gene symbol of the ortholog in the target species.">
        Gene Symbol
      </WithTooltip>
    ),
    filter: (data, filterValue) =>
      data.geneToGeneOrthologyGenerated.objectGene.geneSymbol.displayText ===
      filterValue,
    render: (data) => {
      const query = getXrefAndTaxonQuery(
        data.geneToGeneOrthologyGenerated.objectGene
      );
      const gene =
        data.geneToGeneOrthologyGenerated.objectGene.geneSymbol.displayText;

      return query ? (
        <Link
          to={{
            pathname: LocationToPath[Location.UniProtKBResults],
            search: stringifyQuery({
              query,
            }),
          }}
        >
          {gene}
        </Link>
      ) : (
        gene
      );
    },
  },

  {
    id: 'best',
    label: (
      <WithTooltip tooltip="Indicates this gene is the top-scoring (highest-count) ortholog candidate within this species.">
        Best
      </WithTooltip>
    ),
    filter: (data, filterValue) =>
      filterValue ===
      (isBest(data.geneToGeneOrthologyGenerated.isBestScore.name)
        ? 'Yes'
        : 'No'),
    render: (data) =>
      isBest(data.geneToGeneOrthologyGenerated.isBestScore.name) ? 'Yes' : 'No',
  },
  {
    id: 'best-reverse',
    label: (
      <WithTooltip tooltip="Indicates this gene pair is also the top-scoring (highest-count) ortholog when roles are reversed (reciprocal best hit).">
        Best Reverse
      </WithTooltip>
    ),
    filter: (data, filterValue) =>
      filterValue ===
      (isBest(data.geneToGeneOrthologyGenerated.isBestScoreReverse.name)
        ? 'Yes'
        : 'No'),
    render: (data) =>
      isBest(data.geneToGeneOrthologyGenerated.isBestScoreReverse.name)
        ? 'Yes'
        : 'No',
  },
  {
    id: 'methods',
    label: (
      <div className={styles['methods-label']}>
        <WithTooltip tooltip="Result of orthology-inference resource and algorithm methods.">
          Method
        </WithTooltip>
        {ORTHOLOGY_METHODS.map(({ method, tooltip }) => (
          <WithTooltip key={method} tooltip={tooltip}>
            <div>{method}</div>
          </WithTooltip>
        ))}
        <WithTooltip tooltip="Number of independent orthology methods that support this gene pair.">
          <div className={styles['match-count-label']}>Match counts</div>
        </WithTooltip>
      </div>
    ),
    render: (data) => {
      const scoreNumerator =
        data.geneToGeneOrthologyGenerated.predictionMethodsMatched.length;
      const scoreDenominator =
        scoreNumerator +
        (data.geneToGeneOrthologyGenerated.predictionMethodsNotMatched
          ?.length || 0);
      return [
        ...ORTHOLOGY_METHODS.map(({ method }) => {
          const predictionMethodsMatchedSet = new Set(
            data.geneToGeneOrthologyGenerated.predictionMethodsMatched?.map(
              (m) => m.name
            )
          );
          const predictionMethodsNotMatchedSet = new Set(
            data.geneToGeneOrthologyGenerated.predictionMethodsNotMatched?.map(
              (m) => m.name
            )
          );
          let symbol: string, title: string;
          if (predictionMethodsMatchedSet.has(method)) {
            symbol = '●';
            title = `Match by ${method}`;
          } else if (predictionMethodsNotMatchedSet.has(method)) {
            symbol = '○';
            title = `No match by ${method}`;
          } else {
            symbol = '-';
            title = `Comparision not available on ${method}`;
          }
          return (
            <span
              key={method}
              title={title}
              className={styles['methods-render']}
            >
              {symbol}
            </span>
          );
        }),
        <span
          key="count"
          title={`${scoreNumerator} matches from ${scoreDenominator} checked methods (${Math.round((100 * scoreNumerator) / scoreDenominator)}%)`}
          className={styles['match-count']}
        >
          {scoreNumerator} of {scoreDenominator}
        </span>,
      ];
    },
  },
];

const getRowId = (data: AgrOrthologsResult) =>
  `${data.geneToGeneOrthologyGenerated.objectGene.taxon.name}-${data.geneToGeneOrthologyGenerated.objectGene.geneSymbol.displayText}`;

type Props = {
  data: AgrOrthologsResult[];
  agrXref: Xref;
};

const AgrOrthology = ({ data, agrXref }: Props) => {
  const databaseInfoMaps = useDatabaseInfoMaps();
  if (!databaseInfoMaps) {
    return null;
  }

  const { databaseToDatabaseInfo } = databaseInfoMaps;

  // Lifted from https://github.com/alliance-genome/agr_ui/blob/f1ab35ab8a869e2956e87c8c19e0fcce2f7988ed/src/components/orthology/orthologyTable.js#L56
  const sorted = data.sort((a, b) => {
    const aIndex =
      TAXON_TO_INDEX.get(
        a.geneToGeneOrthologyGenerated.objectGene.taxon.curie
      ) || TAXON_TO_INDEX.size;
    const bIndex =
      TAXON_TO_INDEX.get(
        b.geneToGeneOrthologyGenerated.objectGene.taxon.curie
      ) || TAXON_TO_INDEX.size;
    const indexComparison = aIndex - bIndex;
    if (indexComparison !== 0) {
      return indexComparison;
    }
    const aLength =
      a.geneToGeneOrthologyGenerated.predictionMethodsMatched.length;
    const bLength =
      b.geneToGeneOrthologyGenerated.predictionMethodsMatched.length;
    const lengthComparison = bLength - aLength;
    return lengthComparison;
  });
  // TODO: expand/collapse showing for P05067 when it shouldn't be there
  // TODO: finalize styles
  return (
    <>
      <div
        style={{
          position: 'absolute',
          top: 150,
          left: 50,
          zIndex: 1000,
        }}
      >
        The data within this table is from the Alliance of Genome Resources.
        <br />
        View the corresponding table:{' '}
        <XRef
          databaseToDatabaseInfo={databaseToDatabaseInfo}
          database="AGR"
          xref={agrXref}
          hash="#orthology"
        />
      </div>
      <TableFromData
        id="agr-orthology"
        columns={columns}
        data={sorted}
        getRowId={getRowId}
        className={styles['agr-orthology-table']}
      />
    </>
  );
};

export default AgrOrthology;
