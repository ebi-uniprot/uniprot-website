import { generatePath, Link } from 'react-router-dom';
import {
  ExternalLink,
  LongNumber,
  ReferenceProteomeIcon,
  TremblIcon,
} from 'franklin-sites';
import cn from 'classnames';

import HTMLHead from '../../../shared/components/HTMLHead';
// import YouTubeEmbed from '../../../shared/components/YouTubeEmbed';

import useDataApi from '../../../shared/hooks/useDataApi';

import { LocationToPath, Location } from '../../../app/config/urls';
import ftpUrls from '../../../shared/config/ftpUrls';
import { stringifyQuery } from '../../../shared/utils/url';
import apiUrls from '../../../shared/config/apiUrls/apiUrls';

import { SearchResults } from '../../../shared/types/results';
import { Namespace } from '../../../shared/types/namespaces';

import styles from './styles/landing-page.module.scss';

import SpeciesIllustration from '../../../images/cluster_illustration.img.svg';

const documentationLinks = [
  {
    label: 'Proteome',
    id: 'roteome',
  },
  {
    label: 'Proteome ID',
    id: 'proteome_id',
  },
  {
    label: 'Pan proteomes',
    id: 'pan_proteomes',
  },
  {
    label: 'Reference Proteome',
    id: 'reference_proteome',
  },
];

// const tutorialsInfo = [
//   {
//     id: 'yp1O1gDK8oA',
//     title: 'How to search UniProtKB',
//     date: new Date('2021-10-26'),
//   },
//   {
//     id: 'BHu88Sv--mc',
//     title: 'How to explore a UniProt entry',
//     date: new Date('2022-02-17'),
//   },
//   {
//     id: 'p4_gGkM-Rfs',
//     title: 'How to download embeddings in UniProt',
//     date: new Date('2023-06-25'),
//   },
// ];

const metaDescription =
  'Protein sets for species with sequenced genomes from across the tree of life.';

const LandingPage = () => {
  const { data } = useDataApi<SearchResults<never>>(
    apiUrls.search.search({
      namespace: Namespace.proteomes,
      query: '*',
      size: 0,
      //   facets: [FacetsEnum.ProteomeType],
    })
  );

  let refProtCount: undefined | number;
  let nonRefProtCount: undefined | number;

  if (data?.facets?.[0].values?.length) {
    refProtCount = data?.facets?.[0].values.find(
      (value) => value.value === '1'
    )?.count;
    nonRefProtCount = data?.facets?.[0].values
      .filter((value) => value.value !== '1')
      ?.reduce((sum, value) => sum + value.count, 0);
  }

  return (
    <div className={styles['landing-page']}>
      <HTMLHead title="UniRef">
        <meta name="description" content={metaDescription} />
      </HTMLHead>
      <section className="uniprot-grid">
        <h1 className="uniprot-grid-cell--span-12">UniRef</h1>
        <div
          className={cn(
            'uniprot-grid-cell--small-span-12',
            'uniprot-grid-cell--medium-span-4',
            styles['image-container']
          )}
        >
          <img src={SpeciesIllustration} width={250} height={250} alt="" />
        </div>
        <div className="uniprot-grid-cell--small-span-12 uniprot-grid-cell--medium-span-8">
          <p>
            The UniProt Reference Clusters (UniRef) provide clustered sets of
            sequences from the{' '}
            <Link
              to={generatePath(LocationToPath[Location.HelpEntry], {
                accession: 'uniprotkb',
              })}
            >
              UniProt Knowledgebase
            </Link>{' '}
            (including{' '}
            <Link
              to={generatePath(LocationToPath[Location.HelpEntry], {
                accession: 'canonical_and_isoforms',
              })}
            >
              isoforms
            </Link>
            ) and selected{' '}
            <Link
              to={generatePath(LocationToPath[Location.HelpEntry], {
                accession: 'uniparc',
              })}
            >
              UniParc
            </Link>{' '}
            records in order to obtain complete coverage of the sequence space
            at several resolutions while hiding redundant sequences (but not
            their descriptions) from view.
          </p>
          <p>
            <b>UniRef100</b> contains all UniProt Knowledgebase records plus
            selected UniParc records (see below). In UniRef100, all identical
            sequences and subfragments with 11 or more residues are placed into
            a single record.
          </p>
          <p>
            <b>UniRef90</b> is generated by clustered UniRef100 sequences with
            11 or more residues, such that each cluster is composed of sequences
            that have at least 90% sequence identity to and 90* overlap with the
            seed sequence.
          </p>
          <p>
            Similarly, <b>UniRef50</b> is built by clustering UniRef90 seed
            sequences that have at least 50% sequence identity to and 80%
            overlap with the longest sequence in the cluster.
          </p>
          <p>
            <Link
              to={{
                pathname: LocationToPath[Location.UniRefResults],
                search: stringifyQuery({ query: '*' }),
              }}
            >
              Start searching in UniRef Â»
            </Link>
          </p>
        </div>

        {/* Statistics */}
        <section className="uniprot-grid-cell--small-span-12 uniprot-grid-cell--medium-span-9">
          <h2>Statistics</h2>
          <div className={styles.statistics}>
            <div className={styles.chart}>
              <h3 className="tiny">Taxonomic origin</h3>
              {/* <StatisticsChart
                refProt={refProtHovered}
                nonRefProt={nonRefProtHovered}
              /> */}
            </div>
            <section className={styles['entries-count']}>
              <h2>Proteome Status</h2>
              <h3 className="tiny">Number of Entries</h3>
              <br />
              <p className={styles['stats-count']}>
                <ReferenceProteomeIcon
                  width="2em"
                  className={styles['ref-prot-icon']}
                />
                <span>
                  Reference proteomes
                  <br />
                  {refProtCount && (
                    <Link
                      to={{
                        pathname: LocationToPath[Location.ProteomesResults],
                        search: stringifyQuery({
                          query: `proteome_type:1`,
                        }),
                      }}
                    >
                      <LongNumber>{refProtCount}</LongNumber> entries
                    </Link>
                  )}
                </span>
              </p>
              <p className={styles['stats-count']}>
                <TremblIcon width="2em" className={styles['unreviewed-icon']} />
                <span>
                  Non-reference proteomes
                  <br />
                  {nonRefProtCount && (
                    <Link
                      to={{
                        pathname: LocationToPath[Location.ProteomesResults],
                        search: stringifyQuery({
                          query: `proteome_type:2 OR proteome_type:3 OR proteome_type:4`,
                        }),
                      }}
                    >
                      <LongNumber>{nonRefProtCount}</LongNumber> entries
                    </Link>
                  )}
                </span>
              </p>
              <p>
                Search{' '}
                <Link
                  to={{
                    pathname: LocationToPath[Location.ProteomesResults],
                    search: stringifyQuery({
                      query: `proteome_type:3`,
                    }),
                  }}
                >
                  redundant
                </Link>{' '}
                and{' '}
                <Link
                  to={{
                    pathname: LocationToPath[Location.ProteomesResults],
                    search: stringifyQuery({
                      query: `proteome_type:4`,
                    }),
                  }}
                >
                  {' '}
                  excluded
                </Link>{' '}
                proteomes
              </p>
            </section>
          </div>
        </section>

        {/* Downloads */}
        <section className="uniprot-grid-cell--small-span-12 uniprot-grid-cell--medium-span-3">
          <h2>Downloads</h2>
          <div className={styles.download}>
            <br />
            <br />
            <p>
              Reference proteomes
              <br />
              {/* <ExternalLink url={ftpUrls.referenceProteomes()}>
                ftp
              </ExternalLink>
              <ExternalLink url={`${ftpUrls.referenceProteomes()}README`}>
                readme
              </ExternalLink> */}
            </p>
            <p>
              Pan proteomes
              <br />
              {/* <ExternalLink url={ftpUrls.panProteomes()}>ftp</ExternalLink>
              <ExternalLink url={`${ftpUrls.panProteomes()}README`}>
                readme
              </ExternalLink> */}
            </p>
            <p>
              <ExternalLink url={ftpUrls.uniprotkb}>
                Explore more in FTP
              </ExternalLink>
            </p>
          </div>
        </section>

        {/* Help links */}
        <section className="uniprot-grid-cell--small-span-12 uniprot-grid-cell--medium-span-4">
          <h2>Documentation</h2>
          <ul>
            {documentationLinks.map((item) => (
              <li key={item.id}>
                <Link
                  to={generatePath(LocationToPath[Location.HelpEntry], {
                    accession: item.id,
                  })}
                >
                  {item.label}
                </Link>
              </li>
            ))}
          </ul>
        </section>

        {/* Tutorials */}
        {/* <h2 className="uniprot-grid-cell--span-12">Resources & Webinars</h2>
        {tutorialsInfo.map((item) => (
          <Fragment key={item.id}>
            <div
              className={cn(
                'uniprot-grid-cell--small-span-6',
                'uniprot-grid-cell--medium-span-2',
                styles.tutorial
              )}
            >
              <YouTubeEmbed videoid={item.id} title={item.title} />
            </div>
            <div
              className={cn(
                'uniprot-grid-cell--small-span-6',
                'uniprot-grid-cell--medium-span-2',
                styles.tutorial
              )}
            >
              <div className={styles.tutorial__title} title={item.title}>
                {item.title}
              </div>
              <time dateTime={item.date.toISOString()}>
                {item.date.toDateString()}
              </time>
            </div>
          </Fragment>
        ))} */}
      </section>
    </div>
  );
};

export default LandingPage;
